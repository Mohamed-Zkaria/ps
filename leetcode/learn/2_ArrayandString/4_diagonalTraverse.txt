Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.

 

Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]
Example 2:

Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
-105 <= mat[i][j] <= 105













============================================================================================================











class Solution {
    public int[] findDiagonalOrder(int[][] mat) {
        /* [
            [1,2,3],
            [4,5,6],
            [7,8,9]
           ]
        
        */
        
        // [1,2,4,7,5,3,6,8,9]
        // [0][0], [0][1], [1][0], [2][0], [1][1], [0][2], [1][2], [2][1], [2][2]
        
        if(mat.length == 0 ) return new int[] {};
        if(mat[0].length == 0) return new int[]{};
        int row = mat.length, col = mat[0].length;
        
        int y = 0, x = 0;
        
        int[] result = new int[row * col];
        
        int index = 0;
        
        while(index < result.length){
            result[index++] = mat[x][y];
            int sum = x + y;
            boolean isEven = sum % 2 == 0;
            if (isEven){
                if(y < col - 1 && x > 0 ){
                    y++;
                    x--;
                } else if(y < col -1){
                    y++;

                } else {
                    x++;
                }
            } else {
                if( x < row - 1 && y > 0){
                    y--;
                    x++;
                } else if ( x < row - 1 ){
                    x++;
                } else {
                    y++;
                }
            }
        }
        
        
        return result;
    }
}