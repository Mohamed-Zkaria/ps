https://leetcode.com/explore/learn/card/array-and-string/204/conclusion/1174/

class Solution {
    public void moveZeroes(int[] nums) {
        
        int zeros_counter = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                zeros_counter++;
            }
        }
        
        while(zeros_counter >= 0){
            
            for(int i = 0; i < nums.length - 1; i++){
                if(nums[i] == 0){
                    int temp = nums[i + 1];
                    nums[i] = temp;
                    nums[i+1] = 0;
                }
            }
            
            zeros_counter--;
        }
        
    }
}



Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you minimize the total number of operations done?













================================================================================================================================


# @param {Integer[]} nums
# @return {Void} Do not return anything, modify nums in-place instead.
def move_zeroes(nums)
    non_zero_element = 0
    main_index = 0
    length = nums.length
    while main_index < length
        if nums[main_index] != 0
            nums[non_zero_element] = nums[main_index]
            non_zero_element += 1
        end
        main_index += 1
    end
    
    while non_zero_element < length
        nums[non_zero_element] = 0
        non_zero_element += 1
    end
    
        
end