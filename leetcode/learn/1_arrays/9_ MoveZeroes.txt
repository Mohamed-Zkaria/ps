Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you minimize the total number of operations done?










class Solution {
    public void moveZeroes(int[] nums) {
        
        int zeros_counter = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                zeros_counter++;
            }
        }
        
        while(zeros_counter >= 0){
            
            for(int i = 0; i < nums.length - 1; i++){
                if(nums[i] == 0){
                    int temp = nums[i + 1];
                    nums[i] = temp;
                    nums[i+1] = 0;
                }
            }
            
            zeros_counter--;
        }
        
    }
}









============================================================================================================





// Shift non-zero values as far forward as possible
// Fill remaining space with zeros

public void moveZeroes(int[] nums) {
    if (nums == null || nums.length == 0) return;        

    int insertPos = 0;
    for (int num: nums) {
        if (num != 0) nums[insertPos++] = num;
    }        

    while (insertPos < nums.length) {
        nums[insertPos++] = 0;
    }
}