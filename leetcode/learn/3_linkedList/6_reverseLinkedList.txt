Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?













==============================================================================================



class Solution {
    public ListNode reverseList(ListNode head) {        
        ListNode prev = null;
        while(head!= null){
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }
}








public ListNode reverseList(ListNode head) {
    // Base case: if the list is empty or only one node remains
    if (head == null || head.next == null) {
        return head;
    }

    // Recursive step: reverse the rest of the list
    ListNode reversedHead = reverseList(head.next);

    // Reverse the link between the current node and the next node
    head.next.next = head; // Point next node's next to the current node
    head.next = null;      // Set the current node's next to null

    return reversedHead;   // Return the head of the reversed list
}


